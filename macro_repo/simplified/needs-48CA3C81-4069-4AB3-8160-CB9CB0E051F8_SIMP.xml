<?xml version="1.0" encoding="UTF-8" standalone="no"?><Attributes><Attribute><Name>title</Name><Value>Jeliot 3 - Program Visualization</Value></Attribute><Attribute><Name>description</Name><Value>Jeliot 3 is a Program Visualization application. It visualizes how a Java program is interpreted. Method calls, variables, operation are displayed on a screen as the animation goes on, allowing the student to follow step by step the execution of a program. Programs can be created from scratch or they can be modifyed from previously stored code examples. The Java program being animated does not need any kind of additional calls, all the visualization is automatically generated. Jeliot 3 understands most of the Java constructs and it is able to animate them. Especial effort is currenlty being addressed to animate object oriented features, such as inheritance.

Jeliot 3 belongs to a family that consists of four program animation environments which are based on a self-animation paradigm:

    *  Eliot,
    *  Jeliot I ,
    *  Jeliot 2000,
    *  and Jeliot 3

Jeliot family's key feature has been the fully or semi-automatic visualization of the data and control flows. The development of the Jeliot family has taken more than ten years with different kinds of stages. Several versions of the concept have been developed, namely Eliot (developed at University of Helsinki, Finland), Jeliot I (developed at University of Helsinki, Finland), Jeliot 2000 (developed at Weizmann Institute, Israel). This has led to the stage when the software has become product-like both usable and stable.

The new version Jeliot 3 is a free piece of software published under General Public License (GPL). This means that the future platforms can be developed by networked teams presenting the idea of learning communities. In these communities the distinction between a teacher, a learner and a developer disappears thus learner can develop the tools he or she needs with the other members of the community. 
Keywords: algorithm, code animation, theory of computation, analysis of algorithms, problem complexity</Value></Attribute><Attribute><Name>content_language</Name><Value>en-US</Value></Attribute><Attribute><Name>format</Name><Value/></Attribute><Attribute><Name>requirement</Name><Value>DEFAULT</Value></Attribute><Attribute><Name>other_platform_requirement</Name><Value>N/A</Value></Attribute><Attribute><Name>duration</Name><Value>DEFAULT</Value></Attribute><Attribute><Name>interactivity_type</Name><Value/></Attribute><Attribute><Name>intended_user_language</Name><Value>DEFAULT</Value></Attribute><Attribute><Name>interactivity_level</Name><Value/></Attribute><Attribute><Name>context</Name><Value>DEFAULT</Value></Attribute><Attribute><Name>typical_age_range_min</Name><Value>DEFAULT</Value></Attribute><Attribute><Name>typical_age_range_max</Name><Value>DEFAULT</Value></Attribute><Attribute><Name>difficulty</Name><Value/></Attribute><Attribute><Name>typical_learning_time</Name><Value>DEFAULT</Value></Attribute><Attribute><Name>taxon_path_concept_and_discipline</Name><Value>DEFAULT</Value></Attribute><Attribute><Name>taxon_path_skilllevel_prerequisite</Name><Value>DEFAULT</Value></Attribute><Attribute><Name>taxon_path_idea_discipline</Name><Value>DEFAULT</Value></Attribute><Attribute><Name>intended_end_user_role</Name><Value/></Attribute></Attributes>